module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)    
    output output_[3],
    input sum,
    input carry,   
    
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      fsm testState = {IDLE, A, B, C, AB, AC, BC, ABC, O, FAIL}; // A:100, B:010, C:001, AB:110, AC:101, BC:011, ABC:111, 0:000, Idle and Fail are as the name suggest)
      counter ctr (#SIZE(3), #DIV(24));      
      }
    
      dff counter[27];    
    }
    decoder num_to_seg (#WIDTH(3));
  
  always { 
    num_to_seg.in = ctr.value;
  
    io_seg = ~8b0; // Default to off
    io_sel = 4h1;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn all LED from the 3 blocks off
    output_[2:0] = io_dip[2][2:0];  // input <2> down to input <0> is linked to 2nd group dip from <2> to <0>
    io_led[2][0] = sum;  // 1st group LED <0> represents SUM
    io_led[2][1] = carry;// 1st group LED <1> represents CARRY
    
    if (io_dip[2][0] ^ io_dip[2][1] ^ io_dip[2][2] == sum) {// ^ is XOR <A OR B OR C>
      io_led[2][7] = 1; // indicate that sum is correct
      }
    if ((io_dip[2][0] & io_dip[2][1]) | ((io_dip[2][0] ^ io_dip[2][1]) & io_dip[2][2]) == carry) { // AB OR AC OR BC
      io_led[2][6] = 1; // indicate that carry is correct
      }
    
    
    if (counter.q[25:0] == 0) {
    //The automatic FSM works as follows:
      case(testState.q) { // checking for state change
    
      testState.O:
          if (carry == 0 & sum == 0) {
            testState.d = testState.IDLE;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.ABC:
          if (carry == 1 & sum == 1) {
            testState.d = testState.O;
          } else {
              testState.d = testState.FAIL;
          }
        
         testState.AC:
          if (carry == 1 & sum == 0) {
            testState.d = testState.ABC;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.BC:
          if (carry == 1 & sum == 0) {
            testState.d = testState.AC;
          } else {
              testState.d = testState.FAIL;
          }                  
          
        testState.AB:
          if (carry == 1 & sum == 0) {
            testState.d = testState.BC;
          } else {
              testState.d = testState.FAIL;
          }          
        
          testState.C:
          if (carry == 0 & sum == 1) {
            testState.d = testState.AB;
          } else {
              testState.d = testState.FAIL;
          }
                  
        testState.B:
          if (carry == 0 & sum == 1) {
            testState.d = testState.C;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.A:
          if (carry == 0 & sum == 1) {
            testState.d = testState.B;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.IDLE:
          if (io_button[1] == 1){
            testState.d = testState.A;
          }
          
        testState.FAIL:
          if (counter.q == 0){
            testState.d = testState.IDLE;
          }
       }
    }
    counter.d = counter.q+1;
    
    case(testState.q) { // giving proper led output
    
        testState.O:
          output_[2:0] = 000; // changing the value of the dip to the corresponding number
          io_seg = 8b10000000;
          io_sel = ~4h1;
                 
        testState.ABC:
          output_[2:0] = 111;
          io_seg = 8b11111000;
          io_sel = ~4h1;
        
         testState.AC:
          output_[2:0] = 101;
          io_seg = 8b10000010;
          io_sel = ~4h1;
        
        testState.BC:
          output_[2:0] = 110;
          io_seg = 8b10010010;
          io_sel = ~4h1;
          
        testState.AB:
          output_[2:0] = 011;
          io_seg = 8b10011001;
          io_sel = ~4h1;
          
        testState.C:
          output_[2:0] = 100;
          io_seg = 8b10110000;
          io_sel = ~4h1;     
         
        testState.B:
          output_[2:0] = 010;
          io_seg = 8b10100100;
          io_sel = ~4h1; 
        
        testState.A:
          output_[2:0] = 001;
          io_seg = 8b11001111;
          io_sel = ~4h1;
        
        testState.IDLE:
          io_seg = ~num_to_seg.out;
          io_sel = 4h0;
                    
        testState.FAIL:
          if (counter.q[24] == 1) {
            io_sel = 4h0;
            io_seg = 8b10001110;
          } 
    }
  }
}